{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable spaced-comment */\r\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\r\n/// <reference path=\"../global.d.ts\" />\r\n\r\nimport '@pixi-spine/loader-base'; // Side effect install atlas loader\r\n// eslint-disable-next-line @typescript-eslint/no-duplicate-imports\r\nimport { ISpineResource, SpineLoaderAbstract } from '@pixi-spine/loader-base';\r\nimport type { ISkeletonParser, TextureAtlas } from '@pixi-spine/base';\r\nimport { AtlasAttachmentLoader, SkeletonBinary, SkeletonData, SkeletonJson } from '@pixi-spine/runtime-3.8';\r\n\r\n/**\r\n * @internal\r\n */\r\nclass SpineParser extends SpineLoaderAbstract<SkeletonData> {\r\n    createBinaryParser(): ISkeletonParser {\r\n        return new SkeletonBinary(null);\r\n    }\r\n\r\n    createJsonParser(): ISkeletonParser {\r\n        return new SkeletonJson(null);\r\n    }\r\n\r\n    parseData(parser: ISkeletonParser, atlas: TextureAtlas, dataToParse: any): ISpineResource<SkeletonData> {\r\n        const parserCast = parser as SkeletonBinary | SkeletonJson;\r\n\r\n        parserCast.attachmentLoader = new AtlasAttachmentLoader(atlas);\r\n\r\n        return {\r\n            spineData: parserCast.readSkeletonData(dataToParse),\r\n            spineAtlas: atlas,\r\n        };\r\n    }\r\n}\r\n\r\nnew SpineParser().installLoader();\r\n"],"names":["SpineLoaderAbstract","SkeletonBinary","SkeletonJson","AtlasAttachmentLoader"],"mappings":";;;;;AAaA,MAAM,oBAAoBA,8BAAkC,CAAA;AAAA,EACxD,kBAAsC,GAAA;AAClC,IAAO,OAAA,IAAIC,0BAAe,IAAI,CAAA,CAAA;AAAA,GAClC;AAAA,EAEA,gBAAoC,GAAA;AAChC,IAAO,OAAA,IAAIC,wBAAa,IAAI,CAAA,CAAA;AAAA,GAChC;AAAA,EAEA,SAAA,CAAU,MAAyB,EAAA,KAAA,EAAqB,WAAgD,EAAA;AACpG,IAAA,MAAM,UAAa,GAAA,MAAA,CAAA;AAEnB,IAAW,UAAA,CAAA,gBAAA,GAAmB,IAAIC,gCAAA,CAAsB,KAAK,CAAA,CAAA;AAE7D,IAAO,OAAA;AAAA,MACH,SAAA,EAAW,UAAW,CAAA,gBAAA,CAAiB,WAAW,CAAA;AAAA,MAClD,UAAY,EAAA,KAAA;AAAA,KAChB,CAAA;AAAA,GACJ;AACJ,CAAA;AAEA,IAAI,WAAA,GAAc,aAAc,EAAA;;"}